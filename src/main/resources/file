 @GetMapping("student/save")
    public Result saveStudent(Integer classId, String name, String accountName) {
        log.info("添加学生,classId#{},name#{},accountName#{}", classId, name, accountName);
        Result.ResultBuilder builder = Result.builder();
        try {
            return classService.saveStudent(classId, name, accountName);
        } catch (Exception e) {
            log.error("添加学生失败", e);
            builder.code(-1).msg("添加学生失败").build();
        }
        return builder.build();
    }



     public Result saveStudent(Integer classId, String name, String accountName) {
            Result.ResultBuilder builder = Result.builder();
            if (userMapper.isExist(accountName) > 0) {
                builder.code(-1).msg("账号名已存在！");
            } else {
                User user = User.builder().username(name).accountName(accountName).role("STUDENT").build();
                userMapper.insertSelective(user);
                Optional.ofNullable(user.getId()).ifPresent(userId -> {
                    log.info("userId#{}", userId);
                    UidCid uidCid = UidCid.builder().uid(userId).cid(classId).build();
                    uidCidMapper.insertSelective(uidCid);
                });
            }
            return builder.build();
        }




package com.example.examination.entity;

import lombok.Data;

import javax.persistence.*;

@Data
@Table
@Entity
public class Examination {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;
    private Integer creatorId;
    private String content;
    private String answer;
    private Integer difficulty;
    private Integer type;
    private Integer score;
}




package com.example.examination.controller.model;

import lombok.Data;

@Data
public class PaperPublishReq {
    private Integer PaperId;
    private boolean limitAnswerTime;
    private Long answerTs;
    private String endTs;
}




public void publish(PaperPublishReq req) {
        Integer paperId = req.getPaperId();
        String datetime = LocalDateTime.now().withNano(0).toString().replace("T", " ");
        Publish build = Publish.builder().paperId(paperId).publisherId(commonService.getUserId())
                .publishTs(datetime).limitAnswerTime(req.isLimitAnswerTime()).answerTs(req.getAnswerTs()).endTs(req.getEndTs()).build();
        int i = publishMapper.insertSelective(build);
        if (i > 0) {
            Paper paper = Paper.builder().id(paperId).status(2).publishTs(datetime).build();
            paperMapper.updateByPrimaryKeySelective(paper);
        }
    }



package com.example.examination.entity;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import javax.persistence.*;

@Data
@Table
@Entity
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class Publish {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;
    private Integer publisherId;//发布者
    private Integer paperId;
    private String publishTs;//发布时间
    @Builder.Default
    private boolean limitAnswerTime = false;//是否限制答题时间
    private Long answerTs;//答题时间
    private String endTs;//答题截止时间
}




package com.example.examination.entity;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import javax.persistence.*;

@Data
@Table
@Entity
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;
    private String username;
    private String accountName;
    @Builder.Default
    private String password = "666666";
    private String role;
}



  @PostMapping("addAccount")
    public Result add(@RequestBody User user) {
        log.info("添加或修改用户,user#{}", user);
        Result.ResultBuilder builder = Result.builder();
        try {
            return userService.add(user);
        } catch (Exception e) {
            log.error("添加或修改用户失败,user#{}", user);
            builder.code(-1).msg("添加或修改用户失败");
        }
        return builder.build();
    }



package com.example.examination.dao;

import com.example.examination.controller.model.UserReq;
import com.example.examination.entity.User;

import java.util.List;

public interface UserMapper {
    int deleteByPrimaryKey(Integer id);

    int insert(User record);

    int insertSelective(User record);

    User selectByPrimaryKey(Integer id);

    int updateByPrimaryKeySelective(User record);

    int updateByPrimaryKey(User record);

    User selectByUsernameAndPassword(String username, String password);

    List<User> select(UserReq req);

    Integer count(UserReq req);

    Integer isExist(String accountName);
}




 public Result add(User user) {
        Result.ResultBuilder builder = Result.builder();
        Integer id = user.getId();
        if (id != null) {
            userMapper.updateByPrimaryKeySelective(user);
        } else {
            String username = user.getUsername();
            if (userMapper.isExist(username) > 0) {
                builder.code(-1).msg("账号名已存在！");
            } else {
                user.setAccountName(username);
                userMapper.insertSelective(user);
            }
        }
        return builder.build();
    }