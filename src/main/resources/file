package com.example.examination.controller;

import com.example.examination.service.ClassService;
import com.example.examination.util.Result;
import lombok.extern.slf4j.Slf4j;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.annotation.Resource;

@Slf4j
@RestController
@RequestMapping("class")
public class ClassController {
    @Resource
    private ClassService classService;

    @GetMapping("save")
    public Result save(String classname) {
        log.info("保存班级,classname#{}", classname);
        Result.ResultBuilder builder = Result.builder();
        try {
            return classService.save(classname);
        } catch (Exception e) {
            log.error("保存班级失败", e);
            builder.code(-1).msg("保存班级失败");
        }
        return builder.build();
    }

    @GetMapping("get")
    public Result get() {
        Result.ResultBuilder builder = Result.builder();
        try {
            builder.data(classService.get());
        } catch (Exception e) {
            log.error("查询班级失败", e);
            builder.code(-1).msg("查询班级失败").build();
        }
        return builder.build();
    }

    @GetMapping("student/save")
    public Result saveStudent(Integer classId, String name) {
        log.info("添加学生,classId#{},name#{}", classId, name);
        Result.ResultBuilder builder = Result.builder();
        try {
            classService.saveStudent(classId, name);
        } catch (Exception e) {
            log.error("添加学生失败", e);
            builder.code(-1).msg("添加学生失败").build();
        }
        return builder.build();
    }

    @GetMapping("student/get/{classId}")
    public Result getClassStudent(@PathVariable Integer classId) {
        log.info("查询班级学生,classId#{}", classId);
        Result.ResultBuilder builder = Result.builder();
        try {
            builder.data(classService.getClassStudent(classId));
        } catch (Exception e) {
            log.error("查询班级学生失败", e);
            builder.code(-1).msg("查询班级学生失败").build();
        }
        return builder.build();
    }

    @GetMapping("student/delete/{id}")
    public Result deleteStudent(@PathVariable Integer id) {
        log.info("删除学生,id#{}", id);
        Result.ResultBuilder builder = Result.builder();
        try {
            classService.deleteStudent(id);
        } catch (Exception e) {
            log.error("删除学生失败", e);
            builder.code(-1).msg("删除学生失败").build();
        }
        return builder.build();
    }

    @GetMapping("apply")
    public Result apply(Integer userId, Integer classId) {
        log.info("班级申请,userId#{},classId#{}", userId, classId);
        Result.ResultBuilder builder = Result.builder();
        try {
            return classService.apply(userId, classId);
        } catch (Exception e) {
            log.error("班级申请失败", e);
            builder.code(-1).msg("班级申请失败").build();
        }
        return builder.build();
    }

}



package com.example.examination.service;

import com.alibaba.fastjson.JSONObject;
import com.example.examination.dao.ClassMapper;
import com.example.examination.dao.UidCidMapper;
import com.example.examination.dao.UserMapper;
import com.example.examination.entity.Class;
import com.example.examination.entity.UidCid;
import com.example.examination.entity.User;
import com.example.examination.util.Result;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Slf4j
@Service
public class ClassService {
    @Resource
    private CommonService commonService;
    @Resource
    private ClassMapper classMapper;
    @Resource
    private UidCidMapper uidCidMapper;
    @Resource
    private UserMapper userMapper;

    public Result save(String classname) {
        Result.ResultBuilder builder = Result.builder();
        Class select = classMapper.selectByClassname(classname);
        if (select != null) {
            builder.code(-1).msg("班级已存在，请换个班级名！");
        } else {
            classMapper.insertSelective(Class.builder().classname(classname).build());
        }
        return builder.build();
    }


    public Object get() {
        return classMapper.select();
    }

    public Result apply(Integer userId, Integer classId) {
        Result.ResultBuilder builder = Result.builder();
        UidCid uidCid = uidCidMapper.selectByPrimaryKey(userId);
        if (uidCid != null) {
            String classname = classMapper.selectByPrimaryKey(uidCid.getCid()).getClassname();
            builder.code(-1).msg("您所在班级为【" + classname + "】,无需申请！");
        } else {
            uidCidMapper.insertSelective(UidCid.builder().uid(userId).cid(classId).build());
        }
        return builder.build();
    }

    public Object getClassStudent(Integer classId) {
        List<JSONObject> list = new ArrayList<>();
        uidCidMapper.selectByCid(classId).forEach(uidCid ->
                Optional.ofNullable(userMapper.selectByPrimaryKey(uidCid.getUid())).ifPresent(user -> {
                    if (user.getRole().equals("STUDENT")) {
                        JSONObject jo = new JSONObject();
                        jo.put("id", user.getId());
                        jo.put("name", user.getUsername());
                        list.add(jo);
                    }
                }));
        return list;
    }

    public void saveStudent(Integer classId, String name) {
        User user = User.builder().username(name).role("STUDENT").build();
        userMapper.insertSelective(user);
        Optional.ofNullable(user.getId()).ifPresent(userId -> {
            log.info("userId#{}", userId);
            UidCid uidCid = UidCid.builder().uid(userId).cid(classId).build();
            uidCidMapper.insertSelective(uidCid);
        });
    }

    public void deleteStudent(Integer id) {
        uidCidMapper.deleteByPrimaryKey(id);
    }
}


package com.example.examination.entity;

import com.fasterxml.jackson.annotation.JsonFormat;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import javax.persistence.*;

@Data
@Table
@Entity
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class Paper {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;
    private Integer creatorId;
    private Integer status;//1.未发布 2.已发布
    private String title;
    private String createTs;//创建时间
    private String publishTs;//发布时间
    private String examinations;//试题
    private Integer score;//试卷总分
}


package com.example.examination.dao;

import com.example.examination.controller.model.PaperReq;
import com.example.examination.entity.Paper;

import java.util.List;

public interface PaperMapper {
    int deleteByPrimaryKey(Integer id);

    int insert(Paper record);

    int insertSelective(Paper record);

    Paper selectByPrimaryKey(Integer id);

    int updateByPrimaryKeySelective(Paper record);

    int updateByPrimaryKey(Paper record);

    Integer count(PaperReq req);

    List<Paper> select(PaperReq req);
}


package com.example.examination.service;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.example.examination.controller.model.PaperCreateReq;
import com.example.examination.controller.model.PaperPublishReq;
import com.example.examination.controller.model.PaperReq;
import com.example.examination.controller.model.PublishReq;
import com.example.examination.dao.ExaminationMapper;
import com.example.examination.dao.PaperMapper;
import com.example.examination.dao.PublishMapper;
import com.example.examination.entity.Examination;
import com.example.examination.entity.Paper;
import com.example.examination.entity.Publish;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.Stream;

@Slf4j
@Service
public class PaperService {
    @Resource
    private PaperMapper paperMapper;
    @Resource
    private CommonService commonService;
    @Resource
    private UserService userService;
    @Resource
    private PublishMapper publishMapper;
    @Resource
    private ExaminationMapper examinationMapper;

    public void save(PaperCreateReq req) {
        int score = 0;
        for (String id : req.getExaminations()) {
            Examination examination = examinationMapper.selectByPrimaryKey(Integer.valueOf(id));
            if (examination != null) score += examination.getDifficulty();
        }
        Paper build = Paper.builder().title(req.getTitle()).createTs(LocalDate.now().toString()).status(1)
                .creatorId(commonService.getUserId()).examinations(String.join(",", req.getExaminations())).score(score).build();
        paperMapper.insertSelective(build);
    }

    public void publish(PaperPublishReq req) {
        Integer paperId = req.getPaperId();
        String datetime = LocalDateTime.now().withNano(0).toString().replace("T", " ");
        Publish build = Publish.builder().paperId(paperId).publisherId(commonService.getUserId())
                .publishTs(datetime).limitAnswerTime(req.isLimitAnswerTime()).answerTs(req.getAnswerTs()).build();
        int i = publishMapper.insertSelective(build);
        if (i > 0) {
            Paper paper = Paper.builder().id(paperId).status(2).publishTs(datetime).build();
            paperMapper.updateByPrimaryKeySelective(paper);
        }
    }

    public Object get(PaperReq req) {
        if (req.getPageNo() == null) req.setPageNo(1);
        if (req.getPageSize() == null) req.setPageSize(10);
        Integer userId = commonService.getUserId();
        Optional.ofNullable(userService.getById(userId)).ifPresent(it -> {
            String role = it.getRole();
            if (role.equals("TEACHER") || role.equals("COMPANY")) req.setCreatorId(userId);
        });
        log.info("查询试卷,req#{}", req);
        Integer total = paperMapper.count(req);
        List<JSONObject> list = paperMapper.select(req).stream().map(it -> {
            JSONObject jo = JSON.parseObject(JSON.toJSONString(it));
            List<Examination> examinations = new ArrayList<>();
            Stream.of(it.getExaminations().split(",")).map(Integer::valueOf).forEach(id ->
                    Optional.ofNullable(examinationMapper.selectByPrimaryKey(id)).ifPresent(examinations::add)
            );
            jo.put("examinations", examinations);
            return jo;
        }).collect(Collectors.toList());
        return new JSONObject().fluentPut("total", total).fluentPut("list", list);
    }

    public JSONObject getByPaperId(Integer paperId) {
        final JSONObject jo = new JSONObject();
        Optional.ofNullable(paperMapper.selectByPrimaryKey(paperId)).ifPresent(it -> {
            List<Examination> examinations = new ArrayList<>();
            Stream.of(it.getExaminations().split(",")).map(Integer::valueOf).forEach(id ->
                    Optional.ofNullable(examinationMapper.selectByPrimaryKey(id)).ifPresent(examinations::add)
            );
            jo.putAll(JSON.parseObject(JSON.toJSONString(it)));
            jo.put("examinations", examinations);
        });
        return jo;
    }

    public Object getPublishRecord(PublishReq req) {
        if (req.getPageNo() == null) req.setPageNo(1);
        if (req.getPageSize() == null) req.setPageSize(10);
        Integer userId = commonService.getUserId();
        Optional.ofNullable(userService.getById(userId)).ifPresent(it -> {
            String role = it.getRole();
            if (role.equals("TEACHER") || role.equals("COMPANY")) req.setPublisherId(userId);
        });
        log.info("查询发布记录,req#{}", req);
        int total = publishMapper.count(req);
        List<JSONObject> list = publishMapper.select(req).stream().map(it -> {
            JSONObject jo = JSON.parseObject(JSON.toJSONString(it));
            Optional.ofNullable(userService.getById(it.getPublisherId())).ifPresent(user -> jo.put("username", user.getUsername()));
            Optional.ofNullable(paperMapper.selectByPrimaryKey(it.getPaperId())).ifPresent(paper -> jo.put("title", paper.getTitle()));
            return jo;
        }).collect(Collectors.toList());
        return new JSONObject().fluentPut("total", total).fluentPut("list", list);
    }

//    public JSONObject get(ExaminationReq req) {
//        if (req.getPageNo() == null) req.setPageNo(1);
//        if (req.getPageSize() == null) req.setPageSize(10);
//        Integer userId = commonService.getUserId();
//        Optional.ofNullable(userService.getById(userId)).ifPresent(it -> {
//            String role = it.getRole();
//            if (role.equals("TEACHER") || role.equals("COMPANY")) req.setCreatorId(userId);
//        });
//        log.info("查询试题,req#{}", req);
//        Integer total = examinationMapper.count(req);
//        List<Examination> list = examinationMapper.select(req);
//        return new JSONObject().fluentPut("total", total).fluentPut("list", list);
//    }
//
//    public void delete(Integer id) {
//        examinationMapper.deleteByPrimaryKey(id);
//    }
}



package com.example.examination.entity;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import javax.persistence.*;

/**
 * 答题记录
 */
@Data
@Table
@Entity
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class Reply {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;
    private Integer paperId;//试卷id
    private Integer publishId;//发布记录id
    private Integer userId;//答题人id
    private String submitTs;//试卷提交时间
    private String correct;//正确题id
    private String error;//错误题id
    private String answer;//答案
    private Integer score;//得分
}


package com.example.examination.dao;

import com.example.examination.controller.model.ReplyReq;
import com.example.examination.entity.Reply;

import java.util.List;

public interface ReplyMapper {
    int deleteByPrimaryKey(Integer id);

    int insert(Reply record);

    int insertSelective(Reply record);

    Reply selectByPrimaryKey(Integer id);

    int updateByPrimaryKeySelective(Reply record);

    int updateByPrimaryKey(Reply record);

    int count(ReplyReq req);

    List<Reply> select(ReplyReq req);
}


package com.example.examination.controller.model;

import lombok.Data;

@Data
public class ReplyReq {
    private Integer pageNo;
    private Integer pageSize;
    private Integer userId;//答题人id
    private Integer paperId;
    private Integer publishId;
}


package com.example.examination.service;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.TypeReference;
import com.example.examination.controller.model.ReplyCreateReq;
import com.example.examination.controller.model.ReplyReq;
import com.example.examination.dao.ExaminationMapper;
import com.example.examination.dao.PaperMapper;
import com.example.examination.dao.PublishMapper;
import com.example.examination.dao.ReplyMapper;
import com.example.examination.entity.Reply;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.stream.Collectors;
import java.util.stream.Stream;

@Slf4j
@Service
public class ReplyService {
    @Resource
    private PaperMapper paperMapper;
    @Resource
    private CommonService commonService;
    @Resource
    private UserService userService;
    @Resource
    private ExaminationMapper examinationMapper;
    @Resource
    private ReplyMapper replyMapper;
    @Resource
    private PublishMapper publishMapper;

    public void save(ReplyCreateReq req) {
        List<String> correct = new ArrayList<>();
        List<String> error = new ArrayList<>();
        AtomicInteger score = new AtomicInteger();
        Optional.ofNullable(req.getAnswer()).ifPresent(answer -> {
            Map<String, String> map = JSON.parseObject(answer, new TypeReference<Map<String, String>>() {
            });
            map.forEach((id, value) ->
                    Optional.ofNullable(examinationMapper.selectByPrimaryKey(Integer.valueOf(id))).ifPresent(it -> {
                        if (value.equals(it.getAnswer())) {
                            correct.add(id);
                            score.addAndGet(it.getDifficulty());
                        } else error.add(id);
                    })
            );
        });
        Reply build = Reply.builder().paperId(req.getPaperId()).publishId(req.getPublishId()).answer(req.getAnswer()).userId(commonService.getUserId())
                .submitTs(commonService.getDateTime()).correct(String.join(",", correct)).error(String.join(",", error)).score(score.get()).build();
        replyMapper.insertSelective(build);
    }


    public Object get(ReplyReq req) {
        if (req.getPageNo() == null) req.setPageNo(1);
        if (req.getPageSize() == null) req.setPageSize(10);
        Integer userId = commonService.getUserId();
        Optional.ofNullable(userService.getById(userId)).ifPresent(it -> {
            String role = it.getRole();
            //学生只能查看自己的答题记录
            if (role.equals("STUDENT") || role.equals("INTERVIEWER")) req.setUserId(userId);
        });
        log.info("查询答题记录,req#{}", req);
        Integer total = replyMapper.count(req);
        List<JSONObject> list = replyMapper.select(req).stream().map(it -> {
            JSONObject jo = JSON.parseObject(JSON.toJSONString(it));
            Optional.ofNullable(userService.getById(it.getUserId())).ifPresent(user -> jo.put("username", user.getUsername()));
            Optional.ofNullable(paperMapper.selectByPrimaryKey(it.getPaperId())).ifPresent(paper -> {
                jo.put("title", paper.getTitle());
                jo.put("totalScore", paper.getScore());
            });
            long correctNum = StringUtils.isEmpty(it.getCorrect()) ? 0 : Stream.of(it.getCorrect().split(",")).count();
            jo.put("correctNum", correctNum);
            long errorNum = StringUtils.isEmpty(it.getError()) ? 0 : Stream.of(it.getError().split(",")).count();
            jo.put("errorNum", errorNum);
            return jo;
        }).collect(Collectors.toList());
        return new JSONObject().fluentPut("total", total).fluentPut("list", list);
    }

}