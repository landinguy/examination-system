package com.example.examination.entity;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import javax.persistence.*;

@Data
@Table
@Entity
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;
    private String username;
    @Builder.Default
    private String password = "666666";
    private String role;
}



--------------------------

package com.example.examination.entity;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import javax.persistence.*;

@Data
@Table
@Entity
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class Class {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;
    private String classname;
}



package com.example.examination.controller;

import com.example.examination.service.ClassService;
import com.example.examination.util.Result;
import lombok.extern.slf4j.Slf4j;
import org.springframework.web.bind.annotation.*;

import javax.annotation.Resource;

@Slf4j
@RestController
@RequestMapping("class")
public class ClassController {
    @Resource
    private ClassService classService;

    @GetMapping("save")
    public Result save(String classname) {
        log.info("保存班级,classname#{}", classname);
        Result.ResultBuilder builder = Result.builder();
        try {
            return classService.save(classname);
        } catch (Exception e) {
            log.error("保存班级失败", e);
            builder.code(-1).msg("保存班级失败");
        }
        return builder.build();
    }

    @GetMapping("get")
    public Result get() {
        Result.ResultBuilder builder = Result.builder();
        try {
            builder.data(classService.get());
        } catch (Exception e) {
            log.error("查询班级失败", e);
            builder.code(-1).msg("查询班级失败").build();
        }
        return builder.build();
    }

    @GetMapping("student/save")
    public Result saveStudent(Integer classId, String name) {
        log.info("添加学生,classId#{},name#{}", classId, name);
        Result.ResultBuilder builder = Result.builder();
        try {
            classService.saveStudent(classId, name);
        } catch (Exception e) {
            log.error("添加学生失败", e);
            builder.code(-1).msg("添加学生失败").build();
        }
        return builder.build();
    }

    @GetMapping("student/get/{classId}")
    public Result getClassStudent(@PathVariable Integer classId) {
        log.info("查询班级学生,classId#{}", classId);
        Result.ResultBuilder builder = Result.builder();
        try {
            builder.data(classService.getClassStudent(classId));
        } catch (Exception e) {
            log.error("查询班级学生失败", e);
            builder.code(-1).msg("查询班级学生失败").build();
        }
        return builder.build();
    }

    @GetMapping("student/delete/{id}")
    public Result deleteStudent(@PathVariable Integer id) {
        log.info("删除学生,id#{}", id);
        Result.ResultBuilder builder = Result.builder();
        try {
            classService.deleteStudent(id);
        } catch (Exception e) {
            log.error("删除学生失败", e);
            builder.code(-1).msg("删除学生失败").build();
        }
        return builder.build();
    }

    @PostMapping("apply")
    public Result apply(Integer userId, Integer classId) {
        log.info("班级申请,userId#{},classId#{}", userId, classId);
        Result.ResultBuilder builder = Result.builder();
        try {
            classService.apply(userId, classId);
        } catch (Exception e) {
            log.error("班级申请失败", e);
            builder.code(-1).msg("班级申请失败").build();
        }
        return builder.build();
    }

}


package com.example.examination.dao;

import com.example.examination.entity.Class;

import java.util.List;

public interface ClassMapper {
    int deleteByPrimaryKey(Integer id);

    int insert(Class record);

    int insertSelective(Class record);

    Class selectByPrimaryKey(Integer id);

    int updateByPrimaryKeySelective(Class record);

    int updateByPrimaryKey(Class record);

    Class selectByClassname(String classname);

    List<Class> select();
}



package com.example.examination.service;

import com.alibaba.fastjson.JSONObject;
import com.example.examination.dao.ClassMapper;
import com.example.examination.dao.UidCidMapper;
import com.example.examination.dao.UserMapper;
import com.example.examination.entity.Class;
import com.example.examination.entity.UidCid;
import com.example.examination.entity.User;
import com.example.examination.util.Result;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Slf4j
@Service
public class ClassService {
    @Resource
    private CommonService commonService;
    @Resource
    private ClassMapper classMapper;
    @Resource
    private UidCidMapper uidCidMapper;
    @Resource
    private UserMapper userMapper;

    public Result save(String classname) {
        Result.ResultBuilder builder = Result.builder();
        Class select = classMapper.selectByClassname(classname);
        if (select != null) {
            builder.code(-1).msg("班级已存在，请换个班级名！");
        } else {
            classMapper.insertSelective(Class.builder().classname(classname).build());
        }
        return builder.build();
    }


    public Object get() {
        return classMapper.select();
    }

    public void apply(Integer userId, Integer classId) {
        uidCidMapper.insertSelective(UidCid.builder().uid(userId).cid(classId).build());
    }

    public Object getClassStudent(Integer classId) {
        List<JSONObject> list = new ArrayList<>();
        uidCidMapper.selectByCid(classId).forEach(uidCid ->
                Optional.ofNullable(userMapper.selectByPrimaryKey(uidCid.getUid())).ifPresent(user -> {
                    if (user.getRole().equals("STUDENT")) {
                        JSONObject jo = new JSONObject();
                        jo.put("id", user.getId());
                        jo.put("name", user.getUsername());
                        list.add(jo);
                    }
                }));
        return list;
    }

    public void saveStudent(Integer classId, String name) {
        User user = User.builder().username(name).role("STUDENT").build();
        userMapper.insertSelective(user);
        Optional.ofNullable(user.getId()).ifPresent(userId -> {
            log.info("userId#{}", userId);
            UidCid uidCid = UidCid.builder().uid(userId).cid(classId).build();
            uidCidMapper.insertSelective(uidCid);
        });
    }

    public void deleteStudent(Integer id) {
        uidCidMapper.deleteByPrimaryKey(id);
    }
}



package com.example.examination.controller;

import com.example.examination.util.Result;
import lombok.extern.slf4j.Slf4j;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

import java.io.File;

@Slf4j
@RestController
public class CommonController {

    @GetMapping("backup")
    public boolean backup() {
        log.info("开始备份数据...");
        try {
            String command = "cmd /c mysqldump -u root -proot examination > D:/examination.sql";
            Runtime.getRuntime().exec(command);
        } catch (Exception e) {
            log.error("备份数据失败", e);
            return false;
        }
        return true;
    }

    @GetMapping("restore")
    public Result restore() {
        log.info("开始恢复数据...");
        Result.ResultBuilder builder = Result.builder();
        try {
            File file = new File("D:/examination.sql");
            if (!file.exists()) {
                log.warn("sql文件不存在！");
                builder.code(-1).msg("sql文件不存在");
            } else {
                String command = "cmd /c mysql -u root -proot examination < D:/examination.sql";
                Runtime.getRuntime().exec(command);
            }
        } catch (Exception e) {
            log.error("恢复数据失败", e);
            builder.code(-1).msg("恢复数据失败");
        }
        return builder.build();
    }

}



package com.example.examination.entity;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * 用户id、班级id对应关系
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class UidCid {
    private Integer uid;
    private Integer cid;
}


package com.example.examination.dao;

import com.example.examination.entity.UidCid;

import java.util.List;

public interface UidCidMapper {
    int deleteByPrimaryKey(Integer uid);

    int insert(UidCid record);

    int insertSelective(UidCid record);

    UidCid selectByPrimaryKey(Integer uid);

    int updateByPrimaryKeySelective(UidCid record);

    int updateByPrimaryKey(UidCid record);

    UidCid selectByUidAndCid(Integer uid, Integer cid);

    List<UidCid> selectByCid(Integer cid);
}