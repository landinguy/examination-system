package com.example.examination.controller.model;

import lombok.Data;

@Data
public class PublishReq {
    private Integer pageNo;
    private Integer pageSize;
    private Integer publisherId;
}


package com.example.examination.controller.model;

import lombok.Data;

@Data
public class ReplyCreateReq {
    private Integer paperId;
    private Integer publishId;
    private String answer;
}

package com.example.examination.controller.model;

import lombok.Data;

@Data
public class ReplyReq {
    private Integer pageNo;
    private Integer pageSize;
    private Integer userId;//答题人id
    private Integer paperId;
}


package com.example.examination.entity;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import javax.persistence.*;

/**
 * 答题记录
 */
@Data
@Table
@Entity
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class Reply {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;
    private Integer paperId;//试卷id
    private Integer publishId;//发布记录id
    private Integer userId;//答题人id
    private String submitTs;//试卷提交时间
    private String correct;//正确题id
    private String error;//错误题id
    private String answer;//答案
}


package com.example.examination.controller;

import com.example.examination.controller.model.ReplyCreateReq;
import com.example.examination.controller.model.ReplyReq;
import com.example.examination.service.ReplyService;
import com.example.examination.util.Result;
import lombok.extern.slf4j.Slf4j;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.annotation.Resource;

@Slf4j
@RestController
@RequestMapping("reply")
public class ReplyController {
    @Resource
    private ReplyService replyService;

    @PostMapping("save")
    public Result save(@RequestBody ReplyCreateReq req) {
        log.info("保存答题内容,req#{}", req);
        Result.ResultBuilder builder = Result.builder();
        try {
            replyService.save(req);
        } catch (Exception e) {
            log.error("保存答题内容失败", e);
            builder.code(-1).msg("保存答题内容失败");
        }
        return builder.build();
    }

    @PostMapping("get")
    public Result get(@RequestBody ReplyReq req) {
        Result.ResultBuilder builder = Result.builder();
        try {
            builder.data(replyService.get(req));
        } catch (Exception e) {
            log.error("查询答题记录失败", e);
            builder.code(-1).msg("查询答题记录失败").build();
        }
        return builder.build();
    }

}



package com.example.examination.dao;

import com.example.examination.controller.model.ReplyReq;
import com.example.examination.entity.Reply;

import java.util.List;

public interface ReplyMapper {
    int deleteByPrimaryKey(Integer id);

    int insert(Reply record);

    int insertSelective(Reply record);

    Reply selectByPrimaryKey(Integer id);

    int updateByPrimaryKeySelective(Reply record);

    int updateByPrimaryKey(Reply record);

    int count(ReplyReq req);

    List<Reply> select(ReplyReq req);
}


package com.example.examination.service;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.TypeReference;
import com.example.examination.controller.model.ReplyCreateReq;
import com.example.examination.controller.model.ReplyReq;
import com.example.examination.dao.ExaminationMapper;
import com.example.examination.dao.PaperMapper;
import com.example.examination.dao.ReplyMapper;
import com.example.examination.entity.Reply;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.Stream;

@Slf4j
@Service
public class ReplyService {
    @Resource
    private PaperMapper paperMapper;
    @Resource
    private CommonService commonService;
    @Resource
    private UserService userService;
    @Resource
    private ExaminationMapper examinationMapper;
    @Resource
    private ReplyMapper replyMapper;

    public void save(ReplyCreateReq req) {
        List<String> correct = new ArrayList<>();
        List<String> error = new ArrayList<>();
        Optional.ofNullable(req.getAnswer()).ifPresent(answer -> {
            Map<String, String> map = JSON.parseObject(answer, new TypeReference<Map<String, String>>() {
            });
            map.forEach((id, value) ->
                    Optional.ofNullable(examinationMapper.selectByPrimaryKey(Integer.valueOf(id))).ifPresent(it -> {
                        if (value.equals(it.getAnswer())) correct.add(id);
                        else error.add(id);
                    })
            );
        });
        Reply build = Reply.builder().paperId(req.getPaperId()).publishId(req.getPublishId()).answer(req.getAnswer()).userId(commonService.getUserId())
                .submitTs(commonService.getDateTime()).correct(String.join(",", correct)).error(String.join(",", error)).build();
        replyMapper.insertSelective(build);
    }


    public Object get(ReplyReq req) {
        if (req.getPageNo() == null) req.setPageNo(1);
        if (req.getPageSize() == null) req.setPageSize(10);
        Integer userId = commonService.getUserId();
        Optional.ofNullable(userService.getById(userId)).ifPresent(it -> {
            String role = it.getRole();
            if (role.equals("STUDENT") || role.equals("INTERVIEWER")) req.setUserId(userId);
        });
        log.info("查询答题记录,req#{}", req);
        Integer total = replyMapper.count(req);
        List<JSONObject> list = replyMapper.select(req).stream().map(it -> {
            JSONObject jo = JSON.parseObject(JSON.toJSONString(it));
            Optional.ofNullable(userService.getById(it.getUserId())).ifPresent(user -> jo.put("username", user.getUsername()));
            Optional.ofNullable(paperMapper.selectByPrimaryKey(it.getPaperId())).ifPresent(paper -> jo.put("title", paper.getTitle()));
            jo.put("correctNum", Stream.of(it.getCorrect().split(",")).count());
            jo.put("errorNum", Stream.of(it.getError().split(",")).count());
            return jo;
        }).collect(Collectors.toList());
        return new JSONObject().fluentPut("total", total).fluentPut("list", list);
    }

}


----------
package com.example.examination.service;

import com.example.examination.util.Consts;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;
import java.time.LocalDateTime;
import java.util.Optional;

/**
 * @author landing guy
 * @date 2020/4/18
 */
@Service
public class CommonService {
    @Resource
    private HttpSession httpSession;

    public Integer getUserId() {
        return (Integer) Optional.ofNullable(httpSession.getAttribute(Consts.SEESION_UID)).orElse(null);
    }

    public String getUsername() {
        return (String) Optional.ofNullable(httpSession.getAttribute(Consts.SEESION_UNAME)).orElse(null);
    }

    public String getDateTime() {
        return LocalDateTime.now().withNano(0).toString().replace("T", " ");
    }

}



package com.example.examination.controller;

import com.example.examination.controller.model.PaperCreateReq;
import com.example.examination.controller.model.PaperPublishReq;
import com.example.examination.controller.model.PaperReq;
import com.example.examination.controller.model.PublishReq;
import com.example.examination.service.PaperService;
import com.example.examination.util.Result;
import lombok.extern.slf4j.Slf4j;
import org.springframework.web.bind.annotation.*;

import javax.annotation.Resource;

@Slf4j
@RestController
@RequestMapping("paper")
public class PaperController {

    @Resource
    private PaperService paperService;

    @PostMapping("save")
    public Result save(@RequestBody PaperCreateReq req) {
        log.info("保存试卷,req#{}", req);
        Result.ResultBuilder builder = Result.builder();
        try {
            paperService.save(req);
        } catch (Exception e) {
            log.error("保存试卷失败", e);
            builder.code(-1).msg("保存试卷失败");
        }
        return builder.build();
    }

    @PostMapping("publish")
    public Result publish(@RequestBody PaperPublishReq req) {
        log.info("发布试卷,req#{}", req);
        Result.ResultBuilder builder = Result.builder();
        try {
            paperService.publish(req);
        } catch (Exception e) {
            log.error("发布试卷失败", e);
            builder.code(-1).msg("发布试卷失败");
        }
        return builder.build();
    }

    @PostMapping("publish/record")
    public Result publishRecord(@RequestBody PublishReq req) {
        Result.ResultBuilder builder = Result.builder();
        try {
            builder.data(paperService.getPublishRecord(req));
        } catch (Exception e) {
            log.error("查询发布记录失败", e);
            builder.code(-1).msg("查询发布记录失败");
        }
        return builder.build();
    }

    @PostMapping("get")
    public Result get(@RequestBody PaperReq req) {
        Result.ResultBuilder builder = Result.builder();
        try {
            builder.data(paperService.get(req));
        } catch (Exception e) {
            log.error("查询试卷失败", e);
            builder.code(-1).msg("查询试卷失败").build();
        }
        return builder.build();
    }

    @PostMapping("get/{paperId}")
    public Result get(@PathVariable Integer paperId) {
        log.info("查询试卷,paperId#{}", paperId);
        Result.ResultBuilder builder = Result.builder();
        try {
            builder.data(paperService.getByPaperId(paperId));
        } catch (Exception e) {
            log.error("查询试卷失败", e);
            builder.code(-1).msg("查询试卷失败").build();
        }
        return builder.build();
    }
//
//    @RequestMapping("delete/{id}")
//    public Result deleteAccount(@PathVariable Integer id) {
//        log.info("删除试题,id#{}", id);
//        Result.ResultBuilder builder = Result.builder();
//        try {
//            examinationService.delete(id);
//        } catch (Exception e) {
//            log.error("删除试题失败", e);
//            builder.code(-1).msg("删除试题失败").build();
//        }
//        return builder.build();
//    }

}



package com.example.examination.service;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.example.examination.controller.model.PaperCreateReq;
import com.example.examination.controller.model.PaperPublishReq;
import com.example.examination.controller.model.PaperReq;
import com.example.examination.controller.model.PublishReq;
import com.example.examination.dao.ExaminationMapper;
import com.example.examination.dao.PaperMapper;
import com.example.examination.dao.PublishMapper;
import com.example.examination.entity.Examination;
import com.example.examination.entity.Paper;
import com.example.examination.entity.Publish;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.Stream;

@Slf4j
@Service
public class PaperService {
    @Resource
    private PaperMapper paperMapper;
    @Resource
    private CommonService commonService;
    @Resource
    private UserService userService;
    @Resource
    private PublishMapper publishMapper;
    @Resource
    private ExaminationMapper examinationMapper;

    public void save(PaperCreateReq req) {
        Paper build = Paper.builder().title(req.getTitle()).createTs(LocalDate.now().toString()).status(1)
                .creatorId(commonService.getUserId()).examinations(String.join(",", req.getExaminations())).build();
        paperMapper.insertSelective(build);
    }

    public void publish(PaperPublishReq req) {
        Integer paperId = req.getPaperId();
        String datetime = LocalDateTime.now().withNano(0).toString().replace("T", " ");
        Publish build = Publish.builder().paperId(paperId).publisherId(commonService.getUserId())
                .publishTs(datetime).limitAnswerTime(req.isLimitAnswerTime()).answerTs(req.getAnswerTs()).build();
        int i = publishMapper.insertSelective(build);
        if (i > 0) {
            Paper paper = Paper.builder().id(paperId).status(2).publishTs(datetime).build();
            paperMapper.updateByPrimaryKeySelective(paper);
        }
    }

    public Object get(PaperReq req) {
        if (req.getPageNo() == null) req.setPageNo(1);
        if (req.getPageSize() == null) req.setPageSize(10);
        Integer userId = commonService.getUserId();
        Optional.ofNullable(userService.getById(userId)).ifPresent(it -> {
            String role = it.getRole();
            if (role.equals("TEACHER") || role.equals("COMPANY")) req.setCreatorId(userId);
        });
        log.info("查询试卷,req#{}", req);
        Integer total = paperMapper.count(req);
        List<JSONObject> list = paperMapper.select(req).stream().map(it -> {
            JSONObject jo = JSON.parseObject(JSON.toJSONString(it));
            List<Examination> examinations = new ArrayList<>();
            Stream.of(it.getExaminations().split(",")).map(Integer::valueOf).forEach(id ->
                    Optional.ofNullable(examinationMapper.selectByPrimaryKey(id)).ifPresent(examinations::add)
            );
            jo.put("examinations", examinations);
            return jo;
        }).collect(Collectors.toList());
        return new JSONObject().fluentPut("total", total).fluentPut("list", list);
    }

    public JSONObject getByPaperId(Integer paperId) {
        final JSONObject jo = new JSONObject();
        Optional.ofNullable(paperMapper.selectByPrimaryKey(paperId)).ifPresent(it -> {
            List<Examination> examinations = new ArrayList<>();
            Stream.of(it.getExaminations().split(",")).map(Integer::valueOf).forEach(id ->
                    Optional.ofNullable(examinationMapper.selectByPrimaryKey(id)).ifPresent(examinations::add)
            );
            jo.putAll(JSON.parseObject(JSON.toJSONString(it)));
            jo.put("examinations", examinations);
        });
        return jo;
    }

    public Object getPublishRecord(PublishReq req) {
        if (req.getPageNo() == null) req.setPageNo(1);
        if (req.getPageSize() == null) req.setPageSize(10);
        Integer userId = commonService.getUserId();
        Optional.ofNullable(userService.getById(userId)).ifPresent(it -> {
            String role = it.getRole();
            if (role.equals("TEACHER") || role.equals("COMPANY")) req.setPublisherId(userId);
        });
        log.info("查询发布记录,req#{}", req);
        int total = publishMapper.count(req);
        List<JSONObject> list = publishMapper.select(req).stream().map(it -> {
            JSONObject jo = JSON.parseObject(JSON.toJSONString(it));
            Optional.ofNullable(userService.getById(it.getPublisherId())).ifPresent(user -> jo.put("username", user.getUsername()));
            Optional.ofNullable(paperMapper.selectByPrimaryKey(it.getPaperId())).ifPresent(paper -> jo.put("title", paper.getTitle()));
            return jo;
        }).collect(Collectors.toList());
        return new JSONObject().fluentPut("total", total).fluentPut("list", list);
    }


//    public JSONObject get(ExaminationReq req) {
//        if (req.getPageNo() == null) req.setPageNo(1);
//        if (req.getPageSize() == null) req.setPageSize(10);
//        Integer userId = commonService.getUserId();
//        Optional.ofNullable(userService.getById(userId)).ifPresent(it -> {
//            String role = it.getRole();
//            if (role.equals("TEACHER") || role.equals("COMPANY")) req.setCreatorId(userId);
//        });
//        log.info("查询试题,req#{}", req);
//        Integer total = examinationMapper.count(req);
//        List<Examination> list = examinationMapper.select(req);
//        return new JSONObject().fluentPut("total", total).fluentPut("list", list);
//    }
//
//    public void delete(Integer id) {
//        examinationMapper.deleteByPrimaryKey(id);
//    }
}



package com.example.examination.dao;

import com.example.examination.controller.model.PublishReq;
import com.example.examination.entity.Publish;

import java.util.List;

public interface PublishMapper {
    int deleteByPrimaryKey(Integer id);

    int insert(Publish record);

    int insertSelective(Publish record);

    Publish selectByPrimaryKey(Integer id);

    int updateByPrimaryKeySelective(Publish record);

    int updateByPrimaryKey(Publish record);

    int count(PublishReq req);

    List<Publish> select(PublishReq req);
}